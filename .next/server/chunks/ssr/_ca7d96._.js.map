{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/heiddisbirta/Desktop/vefskolinn/flowrise-prismic/src/components/Button.tsx"],"sourcesContent":["import clsx from \"clsx\";\nimport { PrismicNextLink, PrismicNextLinkProps } from \"@prismicio/next\";\n\nexport default function Button({\n  className,\n  ...restProps\n}: PrismicNextLinkProps) {\n  return (\n    <PrismicNextLink\n      className={clsx(\n        \"block w-fit bg-cyan-700 hover:cyan-800 transition-color duration-200 ease-in-out py-3 px-12 rounded-full font display text-white font-bold text-base tracking-wider\",\n        className\n      )}\n      {...restProps}\n    />\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,SAAS,OAAO,EAC7B,SAAS,EACT,GAAG,WACkB;IACrB,qBACE,8OAAC,8JAAA,CAAA,kBAAe;QACd,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,uKACA;QAED,GAAG,SAAS;;;;;;AAGnB"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///Users/heiddisbirta/Desktop/vefskolinn/flowrise-prismic/src/components/Heading.tsx"],"sourcesContent":["import clsx from \"clsx\";\n\ntype HeadingProps = {\n  as?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n  size?: \"xl\" | \"lg\" | \"md\" | \"sm\";\n  children: React.ReactNode;\n  className?: string;\n};\n\nexport default function Heading({\n  as: Comp = \"h1\",\n  className,\n  children,\n  size = \"lg\",\n}: HeadingProps) {\n  return (\n    <Comp\n      className={clsx(\n        \"font-bold leading-tight tracking-tight font-display text-slate-700\",\n        size === \"xl\" && \"text-5xl md:text-7xl\",\n        size === \"lg\" && \"text-4xl md:text-5xl\",\n        size === \"md\" && \"text-3xl md:text-4xl\",\n        size === \"sm\" && \"text-2xl md:text-3xl\",\n        className\n      )}\n    >\n      {children}\n    </Comp>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AASe,SAAS,QAAQ,EAC9B,IAAI,OAAO,IAAI,EACf,SAAS,EACT,QAAQ,EACR,OAAO,IAAI,EACE;IACb,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,sEACA,SAAS,QAAQ,wBACjB,SAAS,QAAQ,wBACjB,SAAS,QAAQ,wBACjB,SAAS,QAAQ,wBACjB;kBAGD;;;;;;AAGP"}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/heiddisbirta/Desktop/vefskolinn/flowrise-prismic/src/slices/Hero/index.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport { Content } from \"@prismicio/client\";\nimport {\n  JSXMapSerializer,\n  PrismicRichText,\n  SliceComponentProps,\n} from \"@prismicio/react\";\nimport { PrismicNextImage, PrismicNextLink } from \"@prismicio/next\";\n// import { RiH1 } from \"react-icons/ri\";\nimport Bounded from \"@/components/Bounded\";\nimport Button from \"@/components/Button\";\nimport Heading from \"@/components/Heading\";\n\nconst components: JSXMapSerializer = {\n  heading1: ({ children }) => (\n    <Heading\n      as=\"h1\"\n      className=\"md:mb-8 mb-4 mt-12 first:mt-0 last:mb-0\"\n      size=\"xl\"\n    >\n      {children}\n    </Heading>\n  ),\n  paragraph: ({ children }) => (\n    <p className=\"text-2xl text-center font-normal leading-10 font-body text-slate-600 mb-4 md:mb-8 max-w-md\">\n      {children}\n    </p>\n  ),\n};\n/**\n * Props for `Hero`.\n */\nexport type HeroProps = SliceComponentProps<Content.HeroSlice>;\n\n/**\n * Component for \"Hero\" Slices.\n */\n// const Hero: FC<HeroProps> = ({ slice }) => {\nconst Hero: FC<HeroProps> = ({ slice }) => {\n  return (\n    <>\n      {slice.variation === \"default\" && (\n        <Bounded\n          data-slice-type={slice.slice_type}\n          data-slice-variation={slice.variation}\n        >\n          <div className=\"grid grid-cols-1 place-items-center text-center\">\n            <PrismicRichText\n              field={slice.primary.heading}\n              components={components}\n            />\n            <PrismicRichText\n              field={slice.primary.body}\n              components={components}\n            />\n            <Button field={slice.primary.button_link} className=\"mb-8 md:mb-10\">\n              {slice.primary.button_text}\n            </Button>\n            <PrismicNextImage\n              field={slice.primary.image}\n              className=\"drop-shadow-xl max-w-4xl w-full\"\n            />\n          </div>\n        </Bounded>\n      )}\n\n      {slice.variation === \"horizontal\" && (\n        <Bounded\n          data-slice-type={slice.slice_type}\n          data-slice-variation={slice.variation}\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 place-items-center\">\n            <div className=\"grid grid-rows-[1fr,auto,auto] h-fit\">\n              <PrismicRichText\n                field={slice.primary.heading}\n                components={components}\n              />\n              <PrismicRichText\n                field={slice.primary.body}\n                components={components}\n              />\n              <Button\n                field={slice.primary.button_link}\n                className=\"mb-8 md:mb-10\"\n              >\n                {slice.primary.button_text}\n              </Button>\n            </div>\n            <PrismicNextImage\n              field={slice.primary.image}\n              className=\"drop-shadow-xl max-w-4xl w-full\"\n            />\n          </div>\n        </Bounded>\n      )}\n    </>\n  );\n};\nexport default Hero;\n"],"names":[],"mappings":";;;;AAQA,yCAAyC;AACzC;AACA;AACA;AATA;AAKA;;;;;;;AAMA,MAAM,aAA+B;IACnC,UAAU,CAAC,EAAE,QAAQ,EAAE,iBACrB,8OAAC,6HAAA,CAAA,UAAO;YACN,IAAG;YACH,WAAU;YACV,MAAK;sBAEJ;;;;;;IAGL,WAAW,CAAC,EAAE,QAAQ,EAAE,iBACtB,8OAAC;YAAE,WAAU;sBACV;;;;;;AAGP;AAMA;;CAEC,GACD,+CAA+C;AAC/C,MAAM,OAAsB,CAAC,EAAE,KAAK,EAAE;IACpC,qBACE;;YACG,MAAM,SAAS,KAAK,2BACnB,8OAAC,6HAAA,CAAA,UAAO;gBACN,mBAAiB,MAAM,UAAU;gBACjC,wBAAsB,MAAM,SAAS;0BAErC,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC,+JAAA,CAAA,kBAAe;4BACd,OAAO,MAAM,OAAO,CAAC,OAAO;4BAC5B,YAAY;;;;;;sCAEd,8OAAC,+JAAA,CAAA,kBAAe;4BACd,OAAO,MAAM,OAAO,CAAC,IAAI;4BACzB,YAAY;;;;;;sCAEd,8OAAC,4HAAA,CAAA,UAAM;4BAAC,OAAO,MAAM,OAAO,CAAC,WAAW;4BAAE,WAAU;sCACjD,MAAM,OAAO,CAAC,WAAW;;;;;;sCAE5B,8OAAC,+JAAA,CAAA,mBAAgB;4BACf,OAAO,MAAM,OAAO,CAAC,KAAK;4BAC1B,WAAU;;;;;;;;;;;;;;;;;YAMjB,MAAM,SAAS,KAAK,8BACnB,8OAAC,6HAAA,CAAA,UAAO;gBACN,mBAAiB,MAAM,UAAU;gBACjC,wBAAsB,MAAM,SAAS;0BAErC,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,+JAAA,CAAA,kBAAe;oCACd,OAAO,MAAM,OAAO,CAAC,OAAO;oCAC5B,YAAY;;;;;;8CAEd,8OAAC,+JAAA,CAAA,kBAAe;oCACd,OAAO,MAAM,OAAO,CAAC,IAAI;oCACzB,YAAY;;;;;;8CAEd,8OAAC,4HAAA,CAAA,UAAM;oCACL,OAAO,MAAM,OAAO,CAAC,WAAW;oCAChC,WAAU;8CAET,MAAM,OAAO,CAAC,WAAW;;;;;;;;;;;;sCAG9B,8OAAC,+JAAA,CAAA,mBAAgB;4BACf,OAAO,MAAM,OAAO,CAAC,KAAK;4BAC1B,WAAU;;;;;;;;;;;;;;;;;;;AAOxB;uCACe"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"file":"package.json.js","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"file":"devMsg.js","sources":["file:///Users/heiddisbirta/Desktop/vefskolinn/flowrise-prismic/node_modules/%40prismicio/react/src/lib/devMsg.ts"],"sourcesContent":["import { version } from \"../../package.json\";\n\n/**\n * Returns a `prismic.dev/msg` URL for a given message slug.\n *\n * @example\n *\n * ```ts\n * devMsg(\"missing-param\");\n * // => \"https://prismic.dev/msg/react/v1.2.3/missing-param\"\n * ```\n *\n * @param slug - Slug for the message. This corresponds to a Markdown file in\n *   the Git repository's `/messages` directory.\n *\n * @returns The `prismic.dev/msg` URL for the given slug.\n */\nexport function devMsg(slug: string) {\n\treturn `https://prismic.dev/msg/react/v${version}/${slug}`;\n}\n"],"names":[],"mappings":";;;;;AAiBM,SAAU,OAAO,IAAA,EAAY;IAC3B,OAAA,CAAA,+BAAA,kKAAkC,UAAO,CAAA,CAAA,EAAI,IAAI,EAAA;AACzD","ignoreList":[0]}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"file":"PrismicLink.js","sources":["file:///Users/heiddisbirta/Desktop/vefskolinn/flowrise-prismic/node_modules/%40prismicio/react/src/PrismicLink.tsx"],"sourcesContent":["import {\n\tComponentProps,\n\tComponentType,\n\tElementType,\n\tForwardedRef,\n\tHTMLAttributeAnchorTarget,\n\tReactNode,\n\tforwardRef,\n} from \"react\";\nimport {\n\ttype LinkField,\n\ttype LinkResolverFunction,\n\ttype PrismicDocument,\n\tasLinkAttrs,\n\ttype AsLinkAttrsConfig,\n} from \"@prismicio/client\";\nimport { DEV } from \"esm-env\";\n\nimport { devMsg } from \"./lib/devMsg.js\";\n\n/** The default component rendered for internal and external links. */\nconst defaultComponent = \"a\";\n\n/** Props provided to a component when rendered with `<PrismicLink>`. */\nexport interface LinkProps {\n\t/** The URL to link. */\n\thref: string;\n\n\t/**\n\t * The `target` attribute for anchor elements. If the Prismic field is\n\t * configured to open in a new window, this prop defaults to `_blank`.\n\t */\n\ttarget?: HTMLAttributeAnchorTarget;\n\n\t/**\n\t * The `rel` attribute for anchor elements. If the `target` prop is set to\n\t * `\"_blank\"`, this prop defaults to `\"noopener noreferrer\"`.\n\t */\n\trel?: string;\n\n\t/** Children for the component. * */\n\tchildren?: ReactNode;\n}\n\nexport type PrismicLinkProps<\n\tInternalComponentProps = ComponentProps<typeof defaultComponent>,\n\tExternalComponentProps = ComponentProps<typeof defaultComponent>,\n> = Omit<\n\tInternalComponentProps & ExternalComponentProps,\n\t\"rel\" | \"href\" | \"children\"\n> & {\n\t/**\n\t * The `rel` attribute for the link. By default, `\"noreferrer\"` is provided if\n\t * the link's URL is external. This prop can be provided a function to use the\n\t * link's metadata to determine the `rel` value.\n\t */\n\trel?: string | AsLinkAttrsConfig[\"rel\"];\n\n\t/**\n\t * The Link Resolver used to resolve links.\n\t *\n\t * @remarks\n\t * If your app uses Route Resolvers when querying for your Prismic\n\t * repository's content, a Link Resolver does not need to be provided.\n\t *\n\t * @see Learn about Link Resolvers and Route Resolvers {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver}\n\t */\n\tlinkResolver?: LinkResolverFunction;\n\n\t/**\n\t * The component rendered for internal URLs. Defaults to `<a>`.\n\t *\n\t * If your app uses a client-side router that requires a special Link\n\t * component, provide the Link component to this prop.\n\t */\n\tinternalComponent?: ElementType<InternalComponentProps>;\n\n\t/** The component rendered for external URLs. Defaults to `<a>`. */\n\texternalComponent?: ComponentType<ExternalComponentProps>;\n\n\t/**\n\t * The children to render for the link. If no children are provided, the\n\t * link's `text` property will be used.\n\t */\n\tchildren?: ReactNode;\n} & (\n\t\t| {\n\t\t\t\tdocument: PrismicDocument | null | undefined;\n\t\t\t\thref?: never;\n\t\t\t\tfield?: never;\n\t\t  }\n\t\t| {\n\t\t\t\tfield: LinkField | null | undefined;\n\t\t\t\thref?: never;\n\t\t\t\tdocument?: never;\n\t\t  }\n\t\t| {\n\t\t\t\thref: LinkProps[\"href\"];\n\t\t\t\tfield?: LinkField | null | undefined;\n\t\t\t\tdocument?: never;\n\t\t  }\n\t);\n\nexport const PrismicLink = forwardRef(function PrismicLink<\n\tInternalComponentProps = ComponentProps<typeof defaultComponent>,\n\tExternalComponentProps = ComponentProps<typeof defaultComponent>,\n>(\n\tprops: PrismicLinkProps<InternalComponentProps, ExternalComponentProps>,\n\tref: ForwardedRef<Element>,\n) {\n\tconst {\n\t\tfield,\n\t\tdocument: doc,\n\t\tlinkResolver,\n\t\tinternalComponent,\n\t\texternalComponent,\n\t\tchildren,\n\t\t...restProps\n\t} = props;\n\n\tif (DEV) {\n\t\tif (field) {\n\t\t\tif (!field.link_type) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`[PrismicLink] This \"field\" prop value caused an error to be thrown.\\n`,\n\t\t\t\t\tfield,\n\t\t\t\t);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`[PrismicLink] The provided field is missing required properties to properly render a link. The link will not render. For more details, see ${devMsg(\n\t\t\t\t\t\t\"missing-link-properties\",\n\t\t\t\t\t)}`,\n\t\t\t\t);\n\t\t\t} else if (\n\t\t\t\t(\"text\" in field\n\t\t\t\t\t? Object.keys(field).length > 2\n\t\t\t\t\t: Object.keys(field).length > 1) &&\n\t\t\t\t!(\"url\" in field || \"uid\" in field || \"id\" in field)\n\t\t\t) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`[PrismicLink] The provided field is missing required properties to properly render a link. The link may not render correctly. For more details, see ${devMsg(\n\t\t\t\t\t\t\"missing-link-properties\",\n\t\t\t\t\t)}`,\n\t\t\t\t\tfield,\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (doc) {\n\t\t\tif (!(\"url\" in doc || \"id\" in doc)) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`[PrismicLink] The provided document is missing required properties to properly render a link. The link may not render correctly. For more details, see ${devMsg(\n\t\t\t\t\t\t\"missing-link-properties\",\n\t\t\t\t\t)}`,\n\t\t\t\t\tdoc,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst {\n\t\thref: computedHref,\n\t\trel: computedRel,\n\t\t...attrs\n\t} = asLinkAttrs(field ?? doc, {\n\t\tlinkResolver,\n\t\trel: typeof restProps.rel === \"function\" ? restProps.rel : undefined,\n\t});\n\n\tlet rel: string | undefined = computedRel;\n\tif (\"rel\" in restProps && typeof restProps.rel !== \"function\") {\n\t\trel = restProps.rel;\n\t}\n\n\tconst href = (\"href\" in restProps ? restProps.href : computedHref) || \"\";\n\n\tconst InternalComponent = (internalComponent ||\n\t\tdefaultComponent) as ComponentType<LinkProps>;\n\tconst ExternalComponent = (externalComponent ||\n\t\tdefaultComponent) as ComponentType<LinkProps>;\n\tconst Component = href\n\t\t? isInternalURL(href)\n\t\t\t? InternalComponent\n\t\t\t: ExternalComponent\n\t\t: InternalComponent;\n\n\treturn (\n\t\t<Component ref={ref} {...attrs} {...restProps} href={href} rel={rel}>\n\t\t\t{\"children\" in props ? children : field?.text}\n\t\t</Component>\n\t);\n}) as <\n\tInternalComponentProps = ComponentProps<typeof defaultComponent>,\n\tExternalComponentProps = ComponentProps<typeof defaultComponent>,\n>(\n\tprops: PrismicLinkProps<InternalComponentProps, ExternalComponentProps> & {\n\t\tref?: ForwardedRef<Element>;\n\t},\n) => ReactNode;\n\n/**\n * Determines if a URL is internal or external.\n *\n * @param url - The URL to check if internal or external.\n *\n * @returns `true` if `url` is internal, `false` otherwise.\n */\n// TODO: This does not detect all relative URLs as internal such as `about` or `./about`. This function assumes relative URLs start with a \"/\" or \"#\"`.\nexport function isInternalURL(url: string): boolean {\n\tconst isInternal = /^(\\/(?!\\/)|#)/.test(url);\n\tconst isSpecialLink = !isInternal && !/^https?:\\/\\//.test(url);\n\n\treturn isInternal && !isSpecialLink;\n}\n"],"names":["PrismicLink","_jsx"],"mappings":";;;;;;;;;;;;;;;AAqBA,MAAM,mBAAmB;AAkFlB,MAAM,wNAAc,aAAA,EAAW,SAASA,aAI9C,KAAA,EACA,GAAA,EAA0B;IAEpB,MAAA,EACL,KAAA,EACA,UAAU,GAAA,EACV,YAAA,EACA,iBAAA,EACA,iBAAA,EACA,QAAA,EACA,GAAG,UAAA,CAAA,GACA;IAEJ,yKAAI,MAAA,EAAK;QACR,IAAI,OAAO;YACN,IAAA,CAAC,MAAM,SAAA,EAAW;gBACrB,QAAQ,KAAA,CACP,CAAA;AAAA,CAAA,EACA,KAAK;gBAEN,MAAM,IAAI,MACT,CAAA,2IAAA,oKAA8I,SAAA,EAC7I,yBAAyB,CACzB,EAAE;YAAA,OAAA,IAAA,CAGH,UAAU,QACR,OAAO,IAAA,CAAK,KAAK,EAAE,MAAA,GAAS,IAC5B,OAAO,IAAA,CAAK,KAAK,EAAE,MAAA,GAAS,CAAA,KAC/B,CAAA,CAAE,SAAS,SAAS,SAAS,SAAS,QAAQ,KAAA,GAC7C;gBACD,QAAQ,IAAA,CACP,CAAA,oJAAA,oKAAuJ,SAAA,EACtJ,yBAAyB,CACzB,EAAA,EACD,KAAK;YAAA;QAAA,OAAA,IAGG,KAAK;YACf,IAAI,CAAA,CAAE,SAAS,OAAO,QAAQ,GAAA,GAAM;gBACnC,QAAQ,IAAA,CACP,CAAA,uJAAA,oKAA0J,SAAA,EACzJ,yBAAyB,CACzB,EAAA,EACD,GAAG;YAAA;QAEL;IACD;IAGK,MAAA,EACL,MAAM,YAAA,EACN,KAAK,WAAA,EACL,GAAG,OAAA,+KACA,cAAA,EAAY,SAAS,KAAK;QAC7B;QACA,KAAK,OAAO,UAAU,GAAA,KAAQ,aAAa,UAAU,GAAA,GAAM,KAAA;IAAA,CAC3D;IAED,IAAI,MAA0B;IAC9B,IAAI,SAAS,aAAa,OAAO,UAAU,GAAA,KAAQ,YAAY;QAC9D,MAAM,UAAU,GAAA;IAAA;IAGjB,MAAM,OAAA,CAAQ,UAAU,YAAY,UAAU,IAAA,GAAO,YAAA,KAAiB;IAEtE,MAAM,oBAAqB,qBAC1B;IACD,MAAM,oBAAqB,qBAC1B;IACD,MAAM,YAAY,OACf,cAAc,IAAI,IACjB,oBACA,oBACD;IAEH,mOACCC,MAAAA,EAAC,WAAS;QAAC;QAAc,GAAA,KAAA;QAAA,GAAW,SAAA;QAAW;QAAY;QAAA,UACzD,cAAc,QAAQ,WAAW,SAAA,OAAA,KAAA,IAAA,MAAO,IAAA;IAAA,CAAI;AAGhD,CAAC;AAiBK,SAAU,cAAc,GAAA,EAAW;IAClC,MAAA,aAAa,gBAAgB,IAAA,CAAK,GAAG;IAC3C,MAAM,gBAAgB,CAAC,cAAc,CAAC,eAAe,IAAA,CAAK,GAAG;IAE7D,OAAO,cAAc,CAAC;AACvB","ignoreList":[0]}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"file":"PrismicRichText.js","sources":["file:///Users/heiddisbirta/Desktop/vefskolinn/flowrise-prismic/node_modules/%40prismicio/react/src/PrismicRichText.tsx"],"sourcesContent":["import {\n\tcloneElement,\n\tComponentType,\n\tFC,\n\tFragment,\n\tisValidElement,\n\tReactNode,\n} from \"react\";\nimport {\n\tisFilled,\n\tLinkResolverFunction,\n\tRichTextField,\n\tRTAnyNode,\n} from \"@prismicio/client\";\nimport {\n\tcomposeSerializers,\n\tserialize,\n\twrapMapSerializer,\n\tRichTextFunctionSerializer,\n\tRichTextMapSerializer,\n} from \"@prismicio/client/richtext\";\nimport { DEV } from \"esm-env\";\n\nimport { devMsg } from \"./lib/devMsg.js\";\n\nimport { LinkProps, PrismicLink } from \"./PrismicLink.js\";\n\n/**\n * A function mapping Rich Text block types to React Components. It is used to\n * render Rich Text or Title fields.\n *\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}\n */\nexport type JSXFunctionSerializer = RichTextFunctionSerializer<ReactNode>;\n\n/**\n * A map of Rich Text block types to React Components. It is used to render Rich\n * Text or Title fields.\n *\n * @see Templating Rich Text and Title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}\n */\nexport type JSXMapSerializer = RichTextMapSerializer<ReactNode>;\n\n/** Props for `<PrismicRichText>`. */\nexport type PrismicRichTextProps = {\n\t/** The Prismic Rich Text field to render. */\n\tfield: RichTextField | null | undefined;\n\n\t/**\n\t * The Link Resolver used to resolve links.\n\t *\n\t * @remarks\n\t * If your app uses Route Resolvers when querying for your Prismic\n\t * repository's content, a Link Resolver does not need to be provided.\n\t *\n\t * @see Learn about Link Resolvers and Route Resolvers {@link https://io/docs/core-concepts/link-resolver-route-resolver}\n\t */\n\tlinkResolver?: LinkResolverFunction;\n\n\t/**\n\t * A map or function that maps a Rich Text block to a React component.\n\t *\n\t * @remarks\n\t * Prefer using a map serializer over the function serializer when possible.\n\t * The map serializer is simpler to maintain.\n\t *\n\t * @example A map serializer.\n\t *\n\t * ```jsx\n\t * {\n\t *   heading1: ({children}) => <Heading>{children}</Heading>\n\t * }\n\t * ```\n\t *\n\t * @example A function serializer.\n\t *\n\t * ```jsx\n\t * (type, node, content, children) => {\n\t * \tswitch (type) {\n\t * \t\tcase \"heading1\": {\n\t * \t\t\treturn <Heading>{children}</Heading>;\n\t * \t\t}\n\t * \t}\n\t * };\n\t * ```\n\t */\n\tcomponents?: JSXMapSerializer | JSXFunctionSerializer;\n\n\t/**\n\t * The React component rendered for links when the URL is internal.\n\t *\n\t * @defaultValue `<a>`\n\t */\n\tinternalLinkComponent?: ComponentType<LinkProps>;\n\n\t/**\n\t * The React component rendered for links when the URL is external.\n\t *\n\t * @defaultValue `<a>`\n\t */\n\texternalLinkComponent?: ComponentType<LinkProps>;\n\n\t/**\n\t * The value to be rendered when the field is empty. If a fallback is not\n\t * given, `null` will be rendered.\n\t */\n\tfallback?: ReactNode;\n};\n\ntype CreateDefaultSerializerArgs = {\n\tlinkResolver: LinkResolverFunction | undefined;\n\tinternalLinkComponent?: ComponentType<LinkProps>;\n\texternalLinkComponent?: ComponentType<LinkProps>;\n};\n\nconst getDir = (node: RTAnyNode): \"rtl\" | undefined => {\n\tif (\"direction\" in node && node.direction === \"rtl\") {\n\t\treturn \"rtl\";\n\t}\n};\n\nconst createDefaultSerializer = (\n\targs: CreateDefaultSerializerArgs,\n): JSXFunctionSerializer =>\n\twrapMapSerializer<ReactNode>({\n\t\theading1: ({ node, children, key }) => (\n\t\t\t<h1 key={key} dir={getDir(node)}>\n\t\t\t\t{children}\n\t\t\t</h1>\n\t\t),\n\t\theading2: ({ node, children, key }) => (\n\t\t\t<h2 key={key} dir={getDir(node)}>\n\t\t\t\t{children}\n\t\t\t</h2>\n\t\t),\n\t\theading3: ({ node, children, key }) => (\n\t\t\t<h3 key={key} dir={getDir(node)}>\n\t\t\t\t{children}\n\t\t\t</h3>\n\t\t),\n\t\theading4: ({ node, children, key }) => (\n\t\t\t<h4 key={key} dir={getDir(node)}>\n\t\t\t\t{children}\n\t\t\t</h4>\n\t\t),\n\t\theading5: ({ node, children, key }) => (\n\t\t\t<h5 key={key} dir={getDir(node)}>\n\t\t\t\t{children}\n\t\t\t</h5>\n\t\t),\n\t\theading6: ({ node, children, key }) => (\n\t\t\t<h6 key={key} dir={getDir(node)}>\n\t\t\t\t{children}\n\t\t\t</h6>\n\t\t),\n\t\tparagraph: ({ node, children, key }) => (\n\t\t\t<p key={key} dir={getDir(node)}>\n\t\t\t\t{children}\n\t\t\t</p>\n\t\t),\n\t\tpreformatted: ({ node, key }) => <pre key={key}>{node.text}</pre>,\n\t\tstrong: ({ children, key }) => <strong key={key}>{children}</strong>,\n\t\tem: ({ children, key }) => <em key={key}>{children}</em>,\n\t\tlistItem: ({ node, children, key }) => (\n\t\t\t<li key={key} dir={getDir(node)}>\n\t\t\t\t{children}\n\t\t\t</li>\n\t\t),\n\t\toListItem: ({ node, children, key }) => (\n\t\t\t<li key={key} dir={getDir(node)}>\n\t\t\t\t{children}\n\t\t\t</li>\n\t\t),\n\t\tlist: ({ children, key }) => <ul key={key}>{children}</ul>,\n\t\toList: ({ children, key }) => <ol key={key}>{children}</ol>,\n\t\timage: ({ node, key }) => {\n\t\t\tconst img = (\n\t\t\t\t<img\n\t\t\t\t\tsrc={node.url}\n\t\t\t\t\talt={node.alt ?? undefined}\n\t\t\t\t\tdata-copyright={node.copyright ? node.copyright : undefined}\n\t\t\t\t/>\n\t\t\t);\n\n\t\t\treturn (\n\t\t\t\t<p key={key} className=\"block-img\">\n\t\t\t\t\t{node.linkTo ? (\n\t\t\t\t\t\t<PrismicLink\n\t\t\t\t\t\t\tlinkResolver={args.linkResolver}\n\t\t\t\t\t\t\tinternalComponent={args.internalLinkComponent}\n\t\t\t\t\t\t\texternalComponent={args.externalLinkComponent}\n\t\t\t\t\t\t\tfield={node.linkTo}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{img}\n\t\t\t\t\t\t</PrismicLink>\n\t\t\t\t\t) : (\n\t\t\t\t\t\timg\n\t\t\t\t\t)}\n\t\t\t\t</p>\n\t\t\t);\n\t\t},\n\t\tembed: ({ node, key }) => (\n\t\t\t<div\n\t\t\t\tkey={key}\n\t\t\t\tdata-oembed={node.oembed.embed_url}\n\t\t\t\tdata-oembed-type={node.oembed.type}\n\t\t\t\tdata-oembed-provider={node.oembed.provider_name}\n\t\t\t\tdangerouslySetInnerHTML={{ __html: node.oembed.html ?? \"\" }}\n\t\t\t/>\n\t\t),\n\t\thyperlink: ({ node, children, key }) => (\n\t\t\t<PrismicLink\n\t\t\t\tkey={key}\n\t\t\t\tfield={node.data}\n\t\t\t\tlinkResolver={args.linkResolver}\n\t\t\t\tinternalComponent={args.internalLinkComponent}\n\t\t\t\texternalComponent={args.externalLinkComponent}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</PrismicLink>\n\t\t),\n\t\tlabel: ({ node, children, key }) => (\n\t\t\t<span key={key} className={node.data.label}>\n\t\t\t\t{children}\n\t\t\t</span>\n\t\t),\n\t\tspan: ({ text, key }) => {\n\t\t\tconst result: ReactNode[] = [];\n\n\t\t\tlet i = 0;\n\t\t\tfor (const line of text.split(\"\\n\")) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tresult.push(<br key={`${i}__break`} />);\n\t\t\t\t}\n\n\t\t\t\tresult.push(<Fragment key={`${i}__line`}>{line}</Fragment>);\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn <Fragment key={key}>{result}</Fragment>;\n\t\t},\n\t});\n\n/**\n * React component that renders content from a Prismic Rich Text field. By\n * default, HTML elements are rendered for each piece of content. A `heading1`\n * block will render an `<h1>` HTML element, for example. Links will use\n * `<PrismicLink>` by default which can be customized using the\n * `internalLinkComponent` and `externalLinkComponent` props.\n *\n * To customize the components that are rendered, provide a map or function\n * serializer to the `components` prop.\n *\n * @remarks\n * This component returns a React fragment with no wrapping element around the\n * content. If you need a wrapper, add a component around `<PrismicRichText>`.\n *\n * @example Rendering a Rich Text field using the default HTMl elements.\n *\n * ```jsx\n * <PrismicRichText field={document.data.content} />;\n * ```\n *\n * @example Rendering a Rich Text field using a custom set of React components.\n *\n * ```jsx\n * <PrismicRichText\n * \tfield={document.data.content}\n * \tcomponents={{\n * \t\theading1: ({ children }) => <Heading>{children}</Heading>,\n * \t}}\n * />;\n * ```\n *\n * @param props - Props for the component.\n *\n * @returns The Rich Text field's content as React components.\n *\n * @see Learn about Rich Text fields {@link https://io/docs/core-concepts/rich-text-title}\n * @see Learn about Rich Text serializers {@link https://io/docs/core-concepts/html-serializer}\n */\nexport const PrismicRichText: FC<PrismicRichTextProps> = (props) => {\n\tconst {\n\t\tlinkResolver,\n\t\tfield,\n\t\tfallback,\n\t\tcomponents,\n\t\texternalLinkComponent,\n\t\tinternalLinkComponent,\n\t\t...restProps\n\t} = props;\n\n\tif (DEV) {\n\t\tif (\"className\" in restProps) {\n\t\t\tconsole.warn(\n\t\t\t\t`[PrismicRichText] className cannot be passed to <PrismicRichText> since it renders an array without a wrapping component. For more details, see ${devMsg(\n\t\t\t\t\t\"classname-is-not-a-valid-prop\",\n\t\t\t\t)}.`,\n\t\t\t\tfield,\n\t\t\t);\n\t\t}\n\t}\n\n\tif (!isFilled.richText(field)) {\n\t\treturn fallback != null ? <>{fallback}</> : null;\n\t}\n\n\tconst serializer = composeSerializers<ReactNode>(\n\t\ttypeof components === \"object\" ? wrapMapSerializer(components) : components,\n\t\tcreateDefaultSerializer({\n\t\t\tlinkResolver,\n\t\t\tinternalLinkComponent,\n\t\t\texternalLinkComponent,\n\t\t}),\n\t);\n\n\t// The serializer is wrapped in a higher-order function that\n\t// automatically applies a key to React Elements if one is not already\n\t// given.\n\tconst serialized = serialize<ReactNode>(\n\t\tfield,\n\t\t(type, node, text, children, key) => {\n\t\t\tconst result = serializer(type, node, text, children, key);\n\n\t\t\tif (isValidElement(result) && result.key == null) {\n\t\t\t\treturn cloneElement(result, { key });\n\t\t\t} else {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t},\n\t);\n\n\tif (!serialized) {\n\t\treturn fallback != null ? <>{fallback}</> : null;\n\t}\n\n\treturn <>{serialized}</>;\n};\n"],"names":["_jsx","Fragment","_Fragment"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 479, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 485, "column": 0}, "map": {"version":3,"sources":["file:///Users/heiddisbirta/Desktop/vefskolinn/flowrise-prismic/node_modules/%40prismicio/next/dist/PrismicNextImage.js/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const PrismicNextImage = registerClientReference(\n    function() { throw new Error(\"Attempted to call PrismicNextImage() from the server but PrismicNextImage is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@prismicio/next/dist/PrismicNextImage.js <module evaluation>\",\n    \"PrismicNextImage\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,uFACA","ignoreList":[0]}},
    {"offset": {"line": 493, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":["file:///Users/heiddisbirta/Desktop/vefskolinn/flowrise-prismic/node_modules/%40prismicio/next/dist/PrismicNextImage.js/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const PrismicNextImage = registerClientReference(\n    function() { throw new Error(\"Attempted to call PrismicNextImage() from the server but PrismicNextImage is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@prismicio/next/dist/PrismicNextImage.js\",\n    \"PrismicNextImage\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,mEACA","ignoreList":[0]}},
    {"offset": {"line": 507, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"file":"PrismicNextImage.js","sources":["file:///Users/heiddisbirta/Desktop/vefskolinn/flowrise-prismic/node_modules/%40prismicio/next/src/PrismicNextImage.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n\tforwardRef,\n\tForwardRefExoticComponent,\n\tPropsWithoutRef,\n\tRefAttributes,\n} from \"react\";\nimport Image, { ImageProps } from \"next/image\";\nimport { buildURL, ImgixURLParams } from \"imgix-url-builder\";\nimport { ImageFieldImage, isFilled } from \"@prismicio/client\";\nimport { DEV } from \"esm-env\";\n\nimport { devMsg } from \"./lib/devMsg.js\";\n\nimport { imgixLoader } from \"./imgixLoader.js\";\n\nconst castInt = (input: string | number | undefined): number | undefined => {\n\tif (typeof input === \"number\" || typeof input === \"undefined\") {\n\t\treturn input;\n\t} else {\n\t\tconst parsed = Number.parseInt(input);\n\n\t\tif (Number.isNaN(parsed)) {\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\treturn parsed;\n\t\t}\n\t}\n};\n\nexport type PrismicNextImageProps = Omit<\n\tImageProps,\n\t\"src\" | \"alt\" | \"loader\"\n> & {\n\t/** The Prismic Image field or thumbnail to render. */\n\tfield: ImageFieldImage | null | undefined;\n\n\t/**\n\t * An object of Imgix URL API parameters to transform the image.\n\t *\n\t * @see https://docs.imgix.com/apis/rendering\n\t */\n\timgixParams?: { [P in keyof ImgixURLParams]: ImgixURLParams[P] | null };\n\n\t/**\n\t * Declare an image as decorative by providing `alt=\"\"`.\n\t *\n\t * See:\n\t * https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt#decorative_images\n\t */\n\talt?: \"\";\n\n\t/**\n\t * Declare an image as decorative only if the Image field does not have\n\t * alternative text by providing `fallbackAlt=\"\"`.\n\t *\n\t * See:\n\t * https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt#decorative_images\n\t */\n\tfallbackAlt?: \"\";\n\n\t/**\n\t * Rendered when the field is empty. If a fallback is not given, `null` will\n\t * be rendered.\n\t */\n\tfallback?: React.ReactNode;\n\n\tloader?: ImageProps[\"loader\"] | null;\n};\n\n/**\n * React component that renders an image from a Prismic Image field or one of\n * its thumbnails using `next/image`. It will automatically set the `alt`\n * attribute using the Image field's `alt` property.\n *\n * It uses an Imgix URL-based loader by default. A custom loader can be provided\n * with the `loader` prop. If you would like to use the Next.js Image\n * Optimization API instead, set `loader={undefined}`.\n *\n * @param props - Props for the component.\n *\n * @returns A responsive image component using `next/image` for the given Image\n *   field.\n *\n * @see To learn more about `next/image`, see: https://nextjs.org/docs/api-reference/next/image\n */\n// The type annotation is necessary to avoid a type reference issue.\nexport const PrismicNextImage: ForwardRefExoticComponent<\n\tPropsWithoutRef<PrismicNextImageProps> & RefAttributes<HTMLImageElement>\n> = forwardRef<HTMLImageElement, PrismicNextImageProps>(\n\tfunction PrismicNextImage(\n\t\t{\n\t\t\tfield,\n\t\t\timgixParams = {},\n\t\t\talt,\n\t\t\tfallbackAlt,\n\t\t\tfill,\n\t\t\twidth,\n\t\t\theight,\n\t\t\tfallback = null,\n\t\t\tloader = imgixLoader,\n\t\t\t...restProps\n\t\t},\n\t\tref,\n\t) {\n\t\tif (DEV) {\n\t\t\tif (typeof alt === \"string\" && alt !== \"\") {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`[PrismicNextImage] The \"alt\" prop can only be used to declare an image as decorative by passing an empty string (alt=\"\") but was provided a non-empty string. You can resolve this warning by removing the \"alt\" prop or changing it to alt=\"\". For more details, see ${devMsg(\n\t\t\t\t\t\t\"alt-must-be-an-empty-string\",\n\t\t\t\t\t)}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof fallbackAlt === \"string\" && fallbackAlt !== \"\") {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`[PrismicNextImage] The \"fallbackAlt\" prop can only be used to declare an image as decorative by passing an empty string (fallbackAlt=\"\") but was provided a non-empty string. You can resolve this warning by removing the \"fallbackAlt\" prop or changing it to fallbackAlt=\"\". For more details, see ${devMsg(\n\t\t\t\t\t\t\"alt-must-be-an-empty-string\",\n\t\t\t\t\t)}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (!isFilled.imageThumbnail(field)) {\n\t\t\treturn <>{fallback}</>;\n\t\t}\n\n\t\tconst resolvedImgixParams = imgixParams;\n\t\tfor (const x in imgixParams) {\n\t\t\tif (resolvedImgixParams[x as keyof typeof resolvedImgixParams] === null) {\n\t\t\t\tresolvedImgixParams[x as keyof typeof resolvedImgixParams] = undefined;\n\t\t\t}\n\t\t}\n\n\t\tconst src = buildURL(field.url, imgixParams as ImgixURLParams);\n\n\t\tconst ar = field.dimensions.width / field.dimensions.height;\n\n\t\tconst castedWidth = castInt(width);\n\t\tconst castedHeight = castInt(height);\n\n\t\tlet resolvedWidth = castedWidth ?? field.dimensions.width;\n\t\tlet resolvedHeight = castedHeight ?? field.dimensions.height;\n\n\t\tif (castedWidth != null && castedHeight == null) {\n\t\t\tresolvedHeight = castedWidth / ar;\n\t\t} else if (castedWidth == null && castedHeight != null) {\n\t\t\tresolvedWidth = castedHeight * ar;\n\t\t}\n\n\t\t// A non-null assertion is required since we can't statically\n\t\t// know if an alt attribute is available.\n\t\tconst resolvedAlt = (alt ?? (field.alt || fallbackAlt))!;\n\n\t\tif (DEV && typeof resolvedAlt !== \"string\") {\n\t\t\tconsole.error(\n\t\t\t\t`[PrismicNextImage] The following image is missing an \"alt\" property. Please add Alternative Text to the image in Prismic. To mark the image as decorative instead, add one of \\`alt=\"\"\\` or \\`fallbackAlt=\"\"\\`.`,\n\t\t\t\tsrc,\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<Image\n\t\t\t\tref={ref}\n\t\t\t\tsrc={src}\n\t\t\t\twidth={fill ? undefined : resolvedWidth}\n\t\t\t\theight={fill ? undefined : resolvedHeight}\n\t\t\t\talt={resolvedAlt}\n\t\t\t\tfill={fill}\n\t\t\t\tloader={loader === null ? undefined : loader}\n\t\t\t\t{...restProps}\n\t\t\t/>\n\t\t);\n\t},\n);\n"],"names":["PrismicNextImage","_jsx","_Fragment"],"mappings":"","ignoreList":[0]}},
    {"offset": {"line": 517, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}